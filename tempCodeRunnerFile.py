import telebot
import os
import re
from types import SimpleNamespace

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = 717909579

bot = telebot.TeleBot(TOKEN)

products = {
    "Hunter ProS-04": {
        "url": "https://poliv-shop.ru/shop/pros-04",
        "price": "419‚ÇΩ",
        "image": "https://poliv-shop.ru/media/pros-04.jpg"
    },
    "–ö–ª–∞–ø–∞–Ω PGV-101": {
        "url": "https://poliv-shop.ru/klapany/pgv-101",
        "price": "3700‚ÇΩ",
        "image": "https://poliv-shop.ru/media/pgv-101.jpg"
    },
    "–Å–º–∫–æ—Å—Ç—å ATV-3000": {
        "url": "https://poliv-shop.ru/emkost/atv-3000",
        "price": "42400‚ÇΩ",
        "image": "https://poliv-shop.ru/media/atv-3000.jpg"
    }
}

SAVE_PATH = "Z:/tg_bot_poliv/numbers.txt"
os.makedirs(os.path.dirname(SAVE_PATH), exist_ok=True)

user_states = {}
user_temp_data = {}

start_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
start_markup.add("üìã –ú–µ–Ω—é", "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")

@bot.message_handler(commands=['start'])
def send_welcome(message):
    text = (
        "üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ –ü–æ–ª–∏–≤-–®–æ–ø. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é."
    )
    bot.send_message(
        message.chat.id,
        text,
        parse_mode="Markdown",
        reply_markup=start_markup
    )

@bot.message_handler(func=lambda m: m.text == "üìã –ú–µ–Ω—é")
def send_menu(message):
    chat_id = message.chat.id
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="catalog"))
    markup.add(telebot.types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞", callback_data="search"))
    markup.add(telebot.types.InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="call_request"))
    bot.send_message(
        chat_id,
        "*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(func=lambda m: m.text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
def handle_restart(message):
    send_welcome(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    data = call.data
    chat_id = call.message.chat.id

    if data == "catalog":
        for name, info in products.items():
            caption = f"*{name}*\n–¶–µ–Ω–∞: {info['price']}"
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=info['url']))
            bot.send_photo(chat_id, info['image'], caption=caption, parse_mode="Markdown", reply_markup=markup)
        bot.send_message(chat_id, "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏ /start", reply_markup=start_markup)

    elif data == "search":
        user_states[chat_id] = 'awaiting_search'
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("üîô –ù–∞–∑–∞–¥")
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞:", reply_markup=markup)

    elif data == "call_request":
        user_states[chat_id] = "awaiting_name"
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("üîô –ù–∞–∑–∞–¥")
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=markup)

def cancel_and_back(chat_id):
    user_states.pop(chat_id, None)
    user_temp_data.pop(chat_id, None)
    fake = SimpleNamespace(chat=SimpleNamespace(id=chat_id))
    send_menu(fake)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    text = message.text.strip()

    if text in ["üìã –ú–µ–Ω—é", "/start"]:
        send_menu(message)
        return
    if text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫":
        send_welcome(message)
        return
    if text == "üîô –ù–∞–∑–∞–¥":
        cancel_and_back(chat_id)
        return

    state = user_states.get(chat_id)

    if state == 'awaiting_search':
        query = text.lower()
        results = {n: inf for n, inf in products.items() if query in n.lower()}
        if not results:
            bot.send_message(chat_id, "üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        for name, info in results.items():
            caption = f"*{name}*\n–¶–µ–Ω–∞: {info['price']}"
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=info['url']))
            bot.send_photo(chat_id, info['image'], caption=caption, parse_mode="Markdown", reply_markup=markup)
        bot.send_message(chat_id, "üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=start_markup)
        user_states.pop(chat_id, None)
        return

    if state == "awaiting_name":
        user_temp_data[chat_id] = {"name": text}
        user_states[chat_id] = "awaiting_phone"
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.add("üîô –ù–∞–∑–∞–¥")
        bot.send_message(
            chat_id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ (—Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX):",
            reply_markup=markup
        )
        return

    if state == "awaiting_phone":
        if not re.match(r'^\+7\d{10}$', text):
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add("üîô –ù–∞–∑–∞–¥")
            bot.send_message(
                chat_id,
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX",
                reply_markup=markup
            )
            return

        phone = text
        existing = ""
        if os.path.exists(SAVE_PATH):
            with open(SAVE_PATH, "r", encoding="utf-8") as f:
                existing = f.read()
        if phone in existing:
            markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add("üîô –ù–∞–∑–∞–¥")
            bot.send_message(
                chat_id,
                "‚ö†Ô∏è –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π.",
                reply_markup=markup
            )
            return

        name = user_temp_data[chat_id]["name"]
        with open(SAVE_PATH, "a", encoding="utf-8") as f:
            f.write(f"{phone} - {name}\n")

        bot.send_message(
            ADMIN_CHAT_ID,
            f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
        )

        bot.send_message(
            chat_id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.",
            reply_markup=start_markup
        )

        user_states.pop(chat_id, None)
        user_temp_data.pop(chat_id, None)
        return

    bot.send_message(chat_id, "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ üìã –ú–µ–Ω—é", reply_markup=start_markup)

bot.polling()
